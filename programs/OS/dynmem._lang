
include <dynmemhelper.4lwa>;
declare nextTag returns;
declare getTagLen returns;
declare tagTotalLen returns;
declare isTagStop returns;
declare isAllocated returns;
declare tagOfMem returns;
declare memOfTag returns;

asm "reserve dynamic_start 1";
asm "reserve free_count 1";
asm "reserve defrag_cycle_size 1";
asm "reserve fast_free_region 1";

function dynmemInit(start, end){

    var lenLetters := end - start;
    var lenWords := lenLetters / 4;

    if (lenWords > _ZZZ) {
        memErr(1);
    };

    *:dynamic_start := start;
    *:defrag_cycle_size := 3;
    *:free_count := 0;
    *:fast_free_region := *:dynamic_start;

    setUnallocated(*:dynamic_start);
    setTagLen(*:dynamic_start, lenWords);
    *nextTag(*:dynamic_start) := ZZZZ;

};

function malloc(len) returns {
    var taglen;
    var nextt;

    var fast_attempt := attempt_malloc_fast(len);
    if (fast_attempt != ZZZZ){
        return fast_attempt;
    };


    var current := *:dynamic_start;

    while(1){
        if (isTagStop(current)){
            return ZZZZ;
        };

        if (isAllocated(current)){
            goto next;
        };

        taglen := getTagLen(current);
        if (len == taglen){
            # The tag is of equal length, it can be reused.
            setAllocated(current);
            return memOfTag(current);
        };

        if ((len + 1) > taglen){
            # Too short. The plus one is for the tag.
            goto next;
        };

        # We've found the tag we're going to use.
        allocate_from(current, len);

        return memOfTag(current);

        label next;
        current := nextTag(current);
    };
};

function attempt_malloc_fast(len) returns {
    if ((*:fast_free_region) == ZZZZ){
        return ZZZZ;
    };

    if (isAllocated(*:fast_free_region)){
        return ZZZZ;
    };

    if (isTagStop(*:fast_free_region)){
        return ZZZZ;
    };

    if (getTagLen(*:fast_free_region) < len){
        return ZZZZ;
    };

    allocate_from(*:fast_free_region, len);
    [stack _] := *:fast_free_region;
    *:fast_free_region := nextTag(*:fast_free_region);

    return memOfTag([stack _]);
};

# Allocates a piece out of an unallocated tag.
function allocate_from(tag, len) {
    var oldLen := getTagLen(tag);
    if (oldLen == len){
        setAllocated(tag);
        return;
    };


    setAllocated(tag);
    setTagLen(tag, len);

    var next_tag := nextTag(tag);
    if (isTagStop(next_tag)){
        return;
    };

    setTagLen(next_tag, oldLen - (len + 1));
    setUnallocated(next_tag);

};

function free(mem){
    setUnallocated(tagOfMem(mem));
    *:free_count := (*:free_count) + 1;

    if ((*:fast_free_region) == ZZZZ){
        *:fast_free_region := tagOfMem(mem);
    };

    if ((*:free_count) > (*:defrag_cycle_size)){
        *:free_count := 0;
        defragHeap();
    };
};

function defragHeap(){
    var newlen;
    var following := *:dynamic_start;
    var leading := nextTag(following);

    while (1){
        label continue;
        if (isTagStop(leading)){
            goto done;
        };

        if (isAllocated(leading)){
            goto next;
        };


        if (isAllocated(following)){
            goto next;
        };

        if ((*:fast_free_region) == leading){
            # We were about to invalidate the fast free region!
            # Let's just mark it as invalid.
            *:fast_free_region := ZZZZ;
        };


        newlen := getTagLen(following) + tagTotalLen(leading);

        setTagLen(following, newlen);

        # Let's try to merge multiple free tags into one.
        leading := nextTag(leading);
        goto continue;

        label next;
        following := leading;
        leading := nextTag(leading);
    };
    label done;
};

function debugHeap(){
    var tag := *:dynamic_start;
    printf(*:fast_free_region, "Fast free is %w%n");
    while(!isTagStop(tag)){
        printf(*tag, tag, "Addr %w tag %w%n");
        tag := nextTag(tag);
    };
};

function memErr(code){
    printTerminated("Memory Error: ");
    printWord(code);
    printNewline();
};
