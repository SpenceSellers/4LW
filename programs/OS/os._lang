main();
halt;
asm "array syscall_table :malloc :free :println";

include <dynmem._lang>;
include <print.4lwa>;
include <strings.4lwa>;
include <base10.4lwa>;
include <fs._lang>;

declare dynmemInit;
declare printTerminated;
declare malloc returns;
declare println;
declare free;
declare strEq returns;
declare readCharNoEcho returns;
declare readWord returns;
declare printWord;
declare printNewline;
declare debugHeap;
declare enterRaw;
declare lengthTerminated returns;
declare lineEnter returns;

function lineEnter(bufflen){
    var buff;
    buff := malloc(bufflen);
    var pos;
    pos := buff;

    var char;
    while (pos != (buff + (bufflen*4) - 4)){
        label continue;
        char := readCharNoEcho();
        if (char == __C_){
            # Enter char
            goto done;
        };
        if (char == __CB){
            # Backspace char
            if (pos == buff){
                # Shouldn't backspace past beginning
                goto continue;
            };
            [IO] := __CB;
            pos := pos - 4;
            goto continue;

        };
        [IO] := char;
        *pos := char;
        pos := pos + 4;


    };
    label done;
    *pos := ZZZZ;
    [IO] := __C_;
    return buff;

 };

function logWord(str, word){
    printTerminated(str);
    printWord(word);
    printNewline();
};

function strcpy(src, dest, maxlen){
    var i;
    var char;

    i := 0;
    while (1){
        char := *(src + (i*4));
        *(dest + (i*4)) := char;
        if (char == ZZZZ){
            goto endstr;
        };

        if (i > maxlen){
           goto endstr;
        };

        i := i + 1;
    };
    label endstr;
};

declare readNum returns;
function readNum(){
    return readWord();
};

declare promptNum returns;
function promptNum(str){
    var res;
    printTerminated(str);
    res := readNum();
    printNewline();
    return res;
};

function promptYesNo(str){

};


function coredumpCmd(){
    var pos;
    var stop;
    pos := promptNum("Start: ");
    stop := promptNum("Stop: ");

    while (pos != stop){
        [stack _] := pos;
        asm "MV [stack first mem _] [io]";
        pos := pos + 1;
    };
    printNewline();
};

function writefile_cmd(){
    var fname;
    var buffer;
    fname := promptNum("File ID: ");
    fs_new_file(fname);
    buffer := lineEnter(ZZ);
    fs_write_file(fname, buffer, lengthTerminated(buffer) + 1);
    free(buffer);
};

function readfile_cmd(){
    var fname;
    var buffer;
    var len;
    fname := promptNum("File ID: ");
    len := promptNum("Length: ");
    buffer := malloc(len);
    fs_read_file(fname, buffer, len);
    println(buffer);
    free(buffer);

};

function benchmark_mem_cmd(){
    var i;
    i := 0;
    while (i < 30){
        malloc(10);
        i := i + 1;
        [IO] := A;
    };
};

function evalcmd(cmdstr){
    var arg;
    var a;
    if (strEq(cmdstr, "ping")){
        println("Pong!");
        return;
    };

    if (strEq(cmdstr, "peek")){
        arg := promptNum("Addr: ");
        printWord(*arg);
        printNewline();
        return;
    };

    if (strEq(cmdstr, "jump")){
        arg := promptNum("Addr: ");
        [stack _] := arg;
        asm "JP [stack _]";
        return;
    };

    if (strEq(cmdstr, "memdebug")){
        debugHeap();
        return;
    };

    if (strEq(cmdstr, "malloc")){
        arg := promptNum("Size: ");
        printf(malloc(arg), "Alloced addr: %w%n");
        return;
    };

    if (strEq(cmdstr, "free")){
        arg := promptNum("Addr: ");
        free(arg);
        return;
    };

    if (strEq(cmdstr, "shutdown")){
        asm "HL";
        return;
    };

    if (strEq(cmdstr, "coredump")){
        coredumpCmd();
        return;
    };

    if (strEq(cmdstr, "write")){
        arg := promptNum("Addr: ");
        enterRaw(arg);
        return;
    };

    if (strEq(cmdstr, "initfs")){
        fs_init();
        println("Done.");
        return;
    };

    if (strEq(cmdstr, "writefile")){
        writefile_cmd();
        return;
    };

    if (strEq(cmdstr, "readfile")){
        readfile_cmd();
        return;
    };

    if (strEq(cmdstr, "membench")){
        benchmark_mem_cmd();
        return;
    };

    println("Unknown command!");
};


function main(){
    println("Welcome to OSv2");
    dynmemInit(B___, ET__);
    println("Memory initialized");
    printf(:syscall_table, "Syscall table begins at %w.%n");
    var cmd;
    while (1){
        printTerminated("Command: ");
        cmd := lineEnter(40);
        evalcmd(cmd);
        free(cmd);
    };
};
