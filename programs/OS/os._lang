
# Don't change these two lines.
# All programs expect the syscall table to start at addr ___P,
# Corresponding to 16 letters in.
# That's enough for one argument-less fcall and a halt.
main();
halt;

# Syscall table
asm "array syscall_table :malloc :free :println ZZZZ";

include <dynmem._lang>;
include <print.4lwa>;
include <strings.4lwa>;
include <base10.4lwa>;
include <fs._lang>;
include <executables._lang>;
include <linkedlist._lang>;
include <processes._lang>;
include <util._lang>;

declare dynmemInit;
declare printTerminated;
declare malloc returns;
declare println;
declare free;
declare strEq returns;
declare readCharNoEcho returns;
declare readChar returns;
declare readWord returns;
declare printWord;
declare printNewline;
declare debugHeap;
declare enterRaw;
declare lengthTerminated returns;
declare prepare_prog returns;
declare pop_stack returns;

function lineEnter(bufflen) returns {
    var buff := malloc(bufflen);
    var pos := buff;

    var char;
    while (pos != (buff + (bufflen*4) - 4)){
        label continue;
        char := readCharNoEcho();
        if (char == __C_){
            # Enter char
            goto done;
        };
        if (char == __CB){
            # Backspace char
            if (pos == buff){
                # Shouldn't backspace past beginning
                goto continue;
            };
            [IO] := __CB; # Backspace on screen.
            pos := pos - 4; # Go to prev buffer pusition.
            goto continue;

        };
        [IO] := char; # Echo the char
        *pos := char; # Write it to mem
        pos := pos + 4;


    };
    label done;
    *pos := ZZZZ; # Terminate string
    [IO] := __C_; # Write newline
    return buff;

 };

function logWord(str, word){
    printTerminated(str);
    printWord(word);
    printNewline();
};

function strcpy(src, dest, maxlen){
    var char;

    var i := 0;
    while (1){
        char := *(src + (i*4));
        *(dest + (i*4)) := char;
        if (char == ZZZZ){
            goto endstr;
        };

        if (i > maxlen){
           goto endstr;
        };

        i := i + 1;
    };
    label endstr;
};

function readNum() returns{
    return readWord();
};

function promptNum(str) returns {
    printTerminated(str);
    var res := readNum();
    printNewline();
    return res;
};

function promptYesNo(prompt_str) returns {
    printf(prompt_str, "%s (y n): ");
    var response := readChar();
    printNewline();
    if (response == AY){
        return ZZZZ;
    };
    if (response == AN){
        return 0;
    };
    println("Please answer y or n.");
    return promptYesNo(prompt_str);
};


function coredumpCmd(){
    var pos := promptNum("Start: ");
    var stop := promptNum("Stop: ");

    while (pos != stop){
        [stack _] := pos;
        asm "MV [stack first mem _] [io]";
        pos := pos + 1;
    };
    printNewline();
};

function writefile_cmd(){
    var fname := promptNum("File ID: ");
    fs_new_file(fname);
    var buffer := lineEnter(C__);
    fs_write_file(fname, buffer, lengthTerminated(buffer) + 1);
    free(buffer);
};

function readfile_cmd(){
    var fname := promptNum("File ID: ");
    var len := promptNum("Length: ");
    var buffer := malloc(len);
    fs_read_file(fname, buffer, len);
    println(buffer);
    free(buffer);

};

function benchmark_mem_cmd(){
    var i := 0;
    while (i < 30){
        malloc(10);
        i := i + 1;
        [IO] := A;
    };
};

function load_raw_cmd(){
    var buf := malloc(400);
    printf(buf, "Reading to %w%n");
    enterRaw(buf);
    var prog := prepare_prog(buf);
    printf(prog, "Execing at %w%n");
    prog();
    free(buf);
};

function write_raw_file_cmd(){
    var fname := promptNum("File ID: ");
    println("Enter raw:");
    var buf := malloc(ZZ);
    enterRaw(buf);

    fs_new_file(fname);
    fs_write_file(fname, buf, ZZ);

};

function run_file_cmd(){
    var fname := promptNum("File ID: ");
    var buf := malloc(ZZ);
    println("Reading file...");
    fs_read_file(fname, buf, GG);
    println("Preparing program...");
    #var prog := prepare_prog(buf);
    printf("Running:%n%n");

    var proc := process_load_executable(buf);
    add_process_to_scheduler(proc);
    process_start_pid(1);
    #prog();
    #free(buf);
};

function rm_file_cmd(){
    fs_delete_file(promptNum("File ID: "));
};

function time_cmd(){
    asm "MV [reg S] [stack _]";
    printWord([stack _]);
};

function echo_cmd(){
    var buf := lineEnter(50);
    println(buf);
    free(buf);
};

function evalcmd(cmdstr){
    var arg;
    var a;
    if (strEq(cmdstr, "ping")){
        println("Pong!");
        return;
    };

    if (strEq(cmdstr, "peek")){
        arg := promptNum("Addr: ");
        printWord(*arg);
        printNewline();
        return;
    };

    if (strEq(cmdstr, "jump")){
        arg := promptNum("Addr: ");
        [stack _] := arg;
        asm "JP [stack _]";
        return;
    };

    if (strEq(cmdstr, "memdebug")){
        debugHeap();
        return;
    };

    if (strEq(cmdstr, "malloc")){
        arg := promptNum("Size: ");
        printf(malloc(arg), "Alloced addr: %w%n");
        return;
    };

    if (strEq(cmdstr, "free")){
        arg := promptNum("Addr: ");
        free(arg);
        return;
    };

    if (strEq(cmdstr, "shutdown")){
        asm "HL";
        return;
    };

    if (strEq(cmdstr, "coredump")){
        coredumpCmd();
        return;
    };

    if (strEq(cmdstr, "write")){
        arg := promptNum("Addr: ");
        enterRaw(arg);
        return;
    };

    if (strEq(cmdstr, "initfs")){
        fs_init();
        println("Done.");
        return;
    };

    if (strEq(cmdstr, "writefile")){
        if (promptYesNo("Write raw?")){
            write_raw_file_cmd();
        } else {
            writefile_cmd();
        };
        return;
    };

    if (strEq(cmdstr, "readfile")){
        readfile_cmd();
        return;
    };

    if (strEq(cmdstr, "membench")){
        benchmark_mem_cmd();
        return;
    };

    if (strEq(cmdstr, "load")){
        load_raw_cmd();
        return;
    };

    if (strEq(cmdstr, "runfile")){
        run_file_cmd();
        return;
    };

    if (strEq(cmdstr, "rm")){
        rm_file_cmd();
        return;
    };

    if (strEq(cmdstr, "ls")){
        fs_list_files();
        return;
    };

    if (strEq(cmdstr, "time")){
        time_cmd();
        return;
    };

    if (strEq(cmdstr, "echo")){
        echo_cmd();
        return;
    };

    println("Unknown command!");
};

function printStackSizes(){
    asm "SS [const R] [stack _]";
    var r := [stack _];

    asm "SS [const S] [stack _]";
    var s := [stack _];

    asm "SS [const V] [stack _]";
    var v := [stack _];

    printf(r, "Stack R is at %w%n");
    printf(s, "Stack S is at %w%n");
    printf(v, "Stack R is at %w%n");
};

function getFree() returns {
    return ZZZZ - :end;
};

function main(){
    var freeMem := getFree();
    println("Welcome to OSv2");
    printBase10(freeMem);
    printf(freeMem, " (%w) letters of memory free.%n");

    dynmemInit(B___, ET__);
    println("Memory initialized");
    scheduler_init();

    printf(:syscall_table, "Syscall table begins at %w.%n%n");
    var cmd;
    while (1){
        printNewline();
        printTerminated("Command: ");
        cmd := lineEnter(40);
        evalcmd(cmd);
        free(cmd);
    };
};

label end;
