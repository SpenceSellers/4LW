# strings.4lwa

# (addr1: addr) (addr2: addr) (length: words) -- (result : bool)
function memcmp preserving A B C {
    MV [stack S] [reg C] # C is length
    MV [stack S] [reg B] # B is addr2
    MV [stack S] [reg A] # A is addr1
    loop {
        JZ [reg C] [const :_mem_endtrue] # If we're out of length, we're done.
        JE [reg mem A] [reg mem B] [const :_mem_notfalse]
        JP [const :_mem_endfalse] # Compare failed, gotta leave.

        label _mem_notfalse # This compare worked
        MV [reg dec C] [reg C]
        AD [reg A] [const 4] [reg A]
        AD [reg B] [const 4] [reg B]
    }

    label _mem_endtrue
    MV [const ZZZZ] [stack V]
    JP [const :_mem_done]

    label _mem_endfalse
    MV [const ____] [stack V]

    label _mem_done
}

# (addr 1: addr) (addr2: addr) (length: words) --
function memcpy preserving A B L {
    MV [stack S] [reg L] # Remaining length
    MV [stack S] [reg B] # Dest
    MV [stack S] [reg A] # Source
    loop {
         JZ [reg L] [const :@break]
         MV [reg mem B] [reg mem A]
         MV [reg dec L] [reg L]
         MV [reg plusfour A] [reg A]
         MV [reg plusfour B] [reg B]
    }   
}

# (a: Term string) (b: term string) -- (bool)
function strEq preserving A B {
    MV [stack S] [reg A]
    MV [stack S] [reg B]
    
    loop {
        
        JN [reg mem A] [reg mem B] [const :fail]

        # They have to be the same, remember!
        JZ [reg neg mem A] [const :success]
        AD [reg A] [const 4] [reg A]
        AD [reg B] [const 4] [reg B]
    }

    label fail
    MV [const 0] [stack V]
    JP [const :@return]

    label success
    MV [const ZZZZ] [stack V]
    JP [const :@return]
}

# Returns length of a terminated sequence in words.
# Does not include the terminator.
function lengthTerminated preserving A B {
    MV [stack S] [reg A] # Mem addr
    MV [const 0] [reg B]
    loop {
         JZ [reg neg mem A] [const :@break]
         MV [reg plusfour A] [reg A]
         MV [reg inc B] [reg B]
    }
    MV [reg B] [stack V]
}

# (string addr) -- (alloc linkedlist[alloc strings])
function strSplit preserving A B C {
    
}

# (addr lastAddr) -- (nullable next addr)
function strTok preserving A B {
    MV [stack S] [reg A]
    loop {
         JE [reg mem A] [const ' '] [const :at_space]
         JZ [reg neg mem A] [const :at_end]
         MV [reg plusfour A] [reg A]
    }

    label at_space
    MV [const ZZZZ] [reg mem A] # Write terminator at space.
    MV [reg plusfour A] [stack V] # Return start of next.
    JP [const :@return]

    label at_end
    MV [const ZZZZ] [stack V]
}

