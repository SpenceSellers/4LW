JP [const :start]

import dynmem.4lwa
import print.4lwa
import strings.4lwa
import base10.4lwa

label start

call dynmemInit
call malloc [const 10] to [reg E]
call malloc [const 20] to [reg E]
call free [reg E]
call malloc [const 20] to [reg E]
call debugHeap


call printf [const :welcome_str]
SB [const ZZZZ] [const :@end] [reg M]
call printBase10 [reg M]
call printf [const :freemem_str]


loop {
    call printNewline
    call printTerminated [const :entercmd_str]
    call readLineTerm [const :cmd_buffer] [const 10]

    call strEq [const :cmd_buffer] [const :poke_str]
    JZ [stack neg V] [const :run_poke]

    call strEq [const :cmd_buffer] [const :peek_str]
    JZ [stack neg V] [const :run_peek]

    call strEq [const :cmd_buffer] [const :base27_str]
    JZ [stack neg V] [const :run_base27]

    call strEq [const :cmd_buffer] [const :base10_str]
    JZ [stack neg V] [const :run_base10]

    call strEq [const :cmd_buffer] [const :coredump_str]
    JZ [stack neg V] [const :run_coredump]

    call strEq [const :cmd_buffer] [const :write_str]
    JZ [stack neg V] [const :run_write]

    call strEq [const :cmd_buffer] [const :jump_str]
    JZ [stack neg V] [const :run_jump]

    JP [const :badcmd]

    label run_poke
    call poke_cmd
    JP [const :@continue]

    label run_peek
    call peek_cmd
    JP [const :@continue]

    label run_base27
    call base27_cmd
    JP [const :@continue]

    label run_base10
    call base10_cmd
    JP [const :@continue]

    label run_coredump
    call coredump_cmd
    JP [const :@continue]

    label run_write
    call write_cmd
    JP [const :@continue]

    label run_jump
    call jump_cmd
    JP [const :@continue]

    label badcmd
    call printTerminated [const :badcmd_str]
    call printNewline
}

function poke_cmd preserving A B {
    call printTerminated [const :address_str]
    call readWord to [reg A]
    call printNewline
    call readWord to [reg B]
    MV [reg B] [reg mem A]
}

function peek_cmd {
    call printTerminated [const :address_str]
    call readWord
    call printNewline
    MV [stack mem V] [stack S]
    call printWord [stack S]
}

function base27_cmd {
    call readBase10Line
    call printWord [stack V]
}

function base10_cmd {
    call readWord
    call printNewline
    call printBase10 [stack V]
}

function coredump_cmd preserving A B {
    call printTerminated [const :address_str]
    call readWord to [reg A]
    call printNewline
    call printTerminated [const :address_str]
    call readWord to [reg B]
    call printNewline
    call coreDump [reg A] [reg B]
}

function write_cmd preserving A {
    call printTerminated [const :address_str]
    call readWord to [reg A]
    call printNewline
    call enterRaw [reg A]
}

function jump_cmd {
    call printTerminated [const :address_str]
    call readWord
    call printNewline
    JP [stack V]
}

# (start: addr) (end: addr) -- io
function coreDump preserving A B {
    MV [stack S] [reg B]
    MV [stack S] [reg A]

    loop {
        JE [reg A] [reg B] [const :@break]
        MV [reg first mem A] [io]
        MV [reg inc A] [reg A]
    }
}
function readLetter preserving A {
    call readChar to [reg A]
    JN [reg third A] [const _] [const :notletter]
    MV [reg fourth A] [stack V]
    JP [const :@return]

    label notletter
    MV [const ZZZZ] [stack V]
}

function enterRaw preserving A B C {
    MV [stack S] [reg A]
    loop {
        call readLetter to [reg B]
        JZ [reg neg B] [const :@return]
        MV [reg first mem A] [reg C]
        ML [reg C] [const A___] [reg C]
        SB [reg mem A] [reg C] [reg mem A]
        ML [reg B] [const A___] [reg B]
        AD [reg mem A] [reg B] [reg mem A]


        MV [reg inc A] [reg A]
    }
}
term_string welcome_str "Welcome to 4LW OS %n"
term_string freemem_str " letters of memory free %n"

term_string entercmd_str "Command: "
term_string address_str "Addr: "
string cmd_buffer "XXXXXXXXXXXXXXXXXXXX"

term_string poke_str "poke"
term_string peek_str "peek"
term_string base27_str "base27"
term_string base10_str "base10"
term_string coredump_str "coredump"
term_string write_str "write"
term_string jump_str "jump"
term_string badcmd_str "Bad command"
